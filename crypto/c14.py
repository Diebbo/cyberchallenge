# Description: Implement a SHA-384 hash function
import Crypto.Random.random as run
from Crypto.Util.number import long_to_bytes, bytes_to_long, getPrime, isPrime
from Crypto.PublicKey import DSA
from Crypto.Hash import SHA3_384, HMAC, SHA224

msg = 'hash_me_pls'
print("1: " + SHA3_384.new(msg.encode()).hexdigest())


key = 0x73a8ff983914ac73d8d00f9f71a4e49ee6f0c6ca69eda5b7dacb20971fc3f9f8
msg = 'La mia integrità è importante!'
h = HMAC.new(key.to_bytes(32, 'big'), digestmod=SHA224)
print("2: " + h.update(msg.encode()).hexdigest())


key_ = 0x3082025d0201003082023606072a8648ce380401308202290282010100dfe71c1b4e3bdf56cd8c4fae2620c4bbc0378a48f32a9b6209e09f61bbcd22498cd9a1a98fce5f84f11d9f5735d0a41cd9f9943743c54752a8146a70dfaf23e26efed52be493ff1dedfaa8557207ab243a76e7b89dc23cf8fea4fbb465fae660ca6e0d49185a08f81cc17d5e090044228f93bb659dcb29e08ace832150aa2437c83b55d314f4c1fc9b937580d62385053707fdd2e2f39d2b0dbfca40b309b3e8efdd0a978d7c85db52b6c0d25cab553d8b68e5eedc3b0c8de563d34c606cefecc56fe34a71decec27948424cd0e57dd092093784af400a6a189f47aeb762245a39908968fe5b7800d0be304f509aeff829eade9017256b0178ee31fc80d842e1021d00bfdd73a22fb26d1de8c11d0aee3d6fb337904562abceec9c4a835fa90282010100d3586d4fd2450d6b73350b3ea6bafbd9828ca4654088ddbac3e64ae9bb750d109e63d4fb1bcc04c43cdf3f7bcd2afb3b5f3509096f06ccc056a384364ddf485f8066ae304a5fefd7659d736de606411ab6433a6d438b20ababe8623b71df7e4ed140b6145a7fe865f537902f4ed02d4b1858caebf47bf50bfc618e9e9668ba5830629ec59d270aa99242634311525f545031742da7a4ce46365f0ca90ba99ae17c80043a4443c8b3274eb3e304d8788199ad029e0438f43b598936e1e6e7648a43b130f606af5620d728cd220888a25b86cce294e4f91cc6012a059dcfc5b97e23d475f927a57809811d413abea9a9a78fc7c4241231db7e0038c7340b53c607041e021c778385aa43cc017808237f71cc1965324911c5f3ff56e7e00bd27eaf
key = long_to_bytes(key_)
# decode the key with Crypto.PublicKey.RSA
key = DSA.import_key(key)
# extract the modulus
print("y: " + str(key.y))
print("p: " + str(key.p))
print("q: " + str(key.q))
print(f"g: {key.g}")
print(f"x: {key.x}")


# generate a prime number of x bits
x = 1670
rand = 'bau'  # getPrime(x)
print("6: " + str(rand))

p = 141804046813039444817957155484187089675937990287767445690050563726202571441607762940390183398468022054184826140095756117840991223198145029066293412772651913142783061100981562180299162018031158686354121381845652490546092448131867203474669133501163744094587531508232464618769624620536718472377213352962610288453

# is p prime
print("7: " + str(isPrime(p)))
