# Hardcoded key (from the disassembly)
s = [
    0xbd, 0xbd, 0xb7, 0xac, 0x85, 0x8c, 0x98, 0xcf, 0x8d, 0xa1, 0x93, 0x9b, 0x8d, 0x8d, 0x9f, 0x99, 0xcd,
    0xa1, 0x89, 0x97, 0x94, 0x94, 0xa1, 0x8d, 0x9b, 0x94, 0x9a, 0xa1, 0x9b, 0x92, 0x9d, 0x8e, 0x87,
    0x90, 0xc9, 0xa1, 0x97, 0x92, 0xa1, 0xcd, 0xa1, 0xce, 0xa1, 0xcf, 0xa1, 0x9a, 0x9c, 0xca, 0xcc,
    0xcc, 0xca, 0xcf, 0x9a, 0x83
]

def decrypt_key():
    # The original check was: s[i] == (uint8_t)-(input_byte)
    # So, to reverse it: input_byte = (uint8_t)(-s[i])
    decrypted_bytes = [ (-x) & 0xFF for x in s ]
    decrypted_key = bytes(decrypted_bytes).decode('ascii')
    return decrypted_key

if __name__ == "__main__":
    key = decrypt_key()
    print(f"Decrypted Key: {key}")
    print("This is a message for Agent X.")
